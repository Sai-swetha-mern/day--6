//1.a) Write a constructor for the class Movie, which takes a String representing the title of the movie, a String representing the studio, and a String representing the rating as its arguments, and sets the respective class properties to these values.
	
class movie{
	  constructor(title,studio,rating)
	  {
	   this.title=title;
	   this.studio=studio;
	   this.rating=rating;
	}
	}
	var movieDetails=new movie("Ms.Dhoni The untold story","zee studio","PG­13");
	console.log(movieDetails);
//output
movie {
  title: 'Ms.Dhoni The untold story',
  studio: 'zee studio',
  rating: 'PG­13' }


//b) The constructor for the class Movie will set the class property rating to "PG" as default when no rating is provided.

	class movie{
	  constructor(title,studio,rating = "PG")
	  {
	   this.title=title;
	   this.studio=studio;
	   this.rating=rating;
	}
	}
	var movieDetails=new movie("Ms.Dhoni The untold story","zee studio");
	console.log(movieDetails);

//output
movie {
  title: 'Ms.Dhoni The untold story',
  studio: 'zee studio',
  rating: 'PG' }


//c) Write a method getPG, which takes an array of base type Movie as its argument, and returns a new array of only those movies in the input array with a rating of "PG". You may assume the input array is full of Movie instances. The returned array need not be full.

class Movie {
	  constructor(title, rating) {
	    this.title = title;
	    this.rating = rating;
	  }
	}
	
	function getpg(movies) {
	  const pgMovies = movies.filter((movie) => movie.rating === "PG");
	  return pgMovies;
	}
	
	const movies = [
	  new Movie("Evil dead", "PG"),
	  new Movie("beauty and beast", "PG-13"),
	  new Movie("fast and furious", "PG"),
	  new Movie("life of PI", "G")
	];
	
	const pgMovies = getpg(movies);
	console.log(pgMovies); 
//output
[ Movie { title: 'Evil dead', rating: 'PG' },
  Movie { title: 'fast and furious', rating: 'PG' } ]

//d) Write a piece of code that creates an instance of the class Movie with the title “Casino Royale”, the studio “Eon Productions”, and the rating “PG­13”
	class movie{
	  constructor(title,studio,rating)
	  {
	   this.title=title;
	   this.studio=studio;
	   this.rating=rating;
	}
	}
	var CasinoRoyale=new movie("Casino Royale","Eon Productions","PG13");
	console.log(CasinoRoyale);

//Output
 movie {
  title: 'Casino Royale',
  studio: 'Eon Productions',
  rating: 'PG13' }

  //2.circle

class Circle{
    constructor(radius,color)
    {
    this.radius=radius;
    this.color=color;
    }}
    var a = new Circle(1.0,"red");
     console.log(a);
     console.log(a.radius);
     console.log(a.radius,a.color);

//output
Circle { radius: 1, color: 'red' }
1
1 red

//getRadius
class Circle{
    constructor(radius, color){
        this.radius=radius;
        this.color=color;
    }
    
}var c= new Circle(1.0,"red");
console.log(c); //Circle { radius: 1, color: 'red' }
console.log(c.radius);//1
console.log(c.radius,c.color);// 1, red

//+getRadius()

class Circle{
    constructor(radius, color){
        this.radius=radius;
        this.color=color;
    }
    get value()
    {
        return (`Radius:${this.radius} `)
    }
    
}var c= new Circle(1.0,"red");
console.log(c.value); //Radius:1 

//+setRadius(radius)


class Circle {
    constructor(radius, color) {
        this.radius = radius;
        this.color = color;
    }
    
    set value(newRadius) {
        this.radius = newRadius;
    }
}

var c = new Circle(1.0, "red");
c.value = 2.0;
console.log(c.radius);//2

//getcolor

class Circle {
    constructor(radius, color) {
        this.radius = radius;
        this.color = color;
    }
    
    get value() {
        return (`Color: ${this.color}`);
    }
}

var c = new Circle(1.0, "red");
console.log(c.value); //Color:red

//setcolor

class Circle {
    constructor(radius, color) {
        this.radius = radius;
        this.color = color;
    }
    
    set value(newColor) {
        this.color = newColor;
    }
}

var c = new Circle(1.0, "red");
c.value = "black";
console.log(c.color);//black

//tostring()

class Circle {
    constructor(radius, color) {
        this.radius = radius;
        this.color = color;
    }

    ToString() {
        return `Circle[Radius:${this.radius},Color:${this.color}]`;
    }
}

var c = new Circle(1.0, "red");
console.log(c.ToString()); // Call the ToString method with parentheses

//getArea ,//get cirumcumference

class Circle {
    constructor(radius, color) {
        this.radius = radius;
        this.color = color;

    } 
    getArea() {

        return Math.PI * this.radius* this.radius;
    }

    getCircumference() {
        return 2*Math.PI *this.radius;;
    }
}

var c = new Circle(1.0, "red");
console.log(`Area : ${c.getArea()}`);
console.log(`Circumference :${c.getCircumference()}`);

//output: Area : 3.141592653589793
//Circumference :6.283185307179586

//3.Write a “person” class to hold all the details.

class person{
	  constructor (FirstName,Age,MobileNo,Quallification,Email)
	  {
	    this.FirstName=FirstName;
	    this.Age=Age;
	    this.MobileNo=MobileNo;
	    this.Quallification=Quallification;
	    this.Email=Email;
	  }
	    }
	    var details=new person("Swetha",23,6379822044,"M.com(C.A)","swethashree@Gmail.com");                                                                           console.log(details) ;
                
//output:
person {
  FirstName: 'Swetha',
  Age: 23,
  MobileNo: 6379822044,
  Quallification: 'M.com(C.A)',
  Email: 'swethashree@Gmail.com' }

//4.write a class to calculate the uber price.


  class UberPriceCalculator {
  constructor(baseFare, costPerMile, costPerMinute, surgeMultiplier = 1) {
    this.baseFare = baseFare;
    this.costPerMile = costPerMile;
    this.costPerMinute = costPerMinute;
    this.surgeMultiplier = surgeMultiplier;
  }

  calculatePrice(distanceMiles, durationMinutes) {
    const fareBeforeSurge = this.baseFare + (this.costPerMile * distanceMiles) + (this.costPerMinute * durationMinutes);
    const totalFare = fareBeforeSurge * this.surgeMultiplier;
    return totalFare;
  }
}

const calculator = new UberPriceCalculator(2.5, 1.5, 0.25, 1.2);  
const distanceMiles =   10; 
const durationMinutes = 20; 

const price = calculator.calculatePrice(distanceMiles, durationMinutes);
console.log(`Your Uber ride will cost $${price.toFixed(2)}`);
//output
Your Uber ride will cost $27.00
